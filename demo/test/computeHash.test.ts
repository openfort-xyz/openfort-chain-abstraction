import { describe, expect, test } from "vitest";
import { Address, Hex } from "viem";
import { computeHash } from "../utils";

describe("computeHash", () => {
  const PAYMASTER_VALIDATION_GAS_OFFSET = 20;
  const PAYMASTER_DATA_OFFSET = 52;

  test("should compute correct hash for user operation 1", async () => {
    // Setup test data
    const mockUserOp = {
      sender: "0xFb619E988fD324734be51b0475A67b6921D0301f" as Address,
      nonce: 31996375400717808072039644266496n,
      initCode:
        "0x91E60e0613810449d098b0b5Ec8b51A0FE8c89855fbfb9cf0000000000000000000000009590ed0c18190a310f4e93caccc4cc17270bed400000000000000000000000000000000000000000000000000000000000000000" as Hex,
      callData:
        "0x47e1da2a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000003000000000000000000000000ff3311cd15ab091b00421b23bcb60df02efd8db7000000000000000000000000ff3311cd15ab091b00421b23bcb60df02efd8db7000000000000000000000000d129bda7ce0888d7fd66ff46e7577c96984d678fb872dd000000000000000000000000f6e64504ed56ec2725cdd0b3c1b23626d66008a2000000000000000000000000fb619e988fd324734be51b0475a67b6921d0301f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000d129bda7ce0888d7fd66ff46e7577c96984d678f00000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084d85d3d270000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003b6261667962656965346636336c7935676a6471346c676d74336e33346f67637a716d757277663275326e756b693366747073613679636a79677865000000000000000000000000000000000000000000000000000000000000000000" as Hex,
      accountGasLimits:
        "0x000000000000000000000000000f4240000000000000000000000000000f4240" as Hex,
      preVerificationGas: 1000000n,
      gasFees:
        "0x0000000000000000000000003b9aca00000000000000000000000000b2d05e00" as Hex,
      paymasterAndData:
        "0x3cB057Fd3BE519cB50788b8b282732edBF533DC6000000000000000000000000000f4240000000000000000000000000000186a000000136f6d400000127b494018e2048c85Eae2a4443408C284221B33e6190646300000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000aa37dc01fF3311cd15aB091B00421B23BcB60df02EFD8db7Fb619E988fD324734be51b0475A67b6921D0301f00000000000000000000000000000000000000000000000000000000000001f4469cfb36ee62bf829b1a21065b34fad76f69fc458ef15aef644db820e87880e91e9fc86ebe6112b1ad52f5cf050f63cabf35c42328886d54dba63d7912cbb7461b" as Hex,
      signature:
        "0x47140b77612d9ea6bb0d7175ae8c91ea693e4e231fb48ae499c45d0a9309a42735de448da6ce53a4f195607a9afb7a4a21d5ae78c20cff808702d4e892a082ee1b" as Hex,
    };
    const chain = "base";
    const validUntil = 20379348n;
    const validAfter = 19379348n;
    const gasInfo = `${mockUserOp.paymasterAndData.slice(2 + 2 * PAYMASTER_VALIDATION_GAS_OFFSET, 2 + 2 * PAYMASTER_DATA_OFFSET)}`;

    const verificationGasLimit = BigInt(`0x${gasInfo.slice(0, 32)}`);
    const postVerificationGasLimit = BigInt(`0x${gasInfo.slice(32, 64)}`);
    const hash = computeHash(
      mockUserOp,
      chain,
      validUntil,
      validAfter,
      verificationGasLimit,
      postVerificationGasLimit,
    );
    expect(hash).toMatch(/^0x[a-fA-F0-9]{64}$/);
    expect(hash).toBe(
      "0xa96409479e23813ab559babaa29a18b31797f99fb6aefe66782fb8304dcb52ab",
    );
  });
});
