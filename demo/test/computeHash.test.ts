import { describe, expect, test } from "vitest";
import { Address, Hex } from "viem";
import { computeHash } from "../utils";

describe("computeHash", () => {
    const PAYMASTER_VALIDATION_GAS_OFFSET = 20;
    const PAYMASTER_DATA_OFFSET = 52;

  test("should compute correct hash for user operation 1", async () => {
    // Setup test data
    const mockUserOp = {
      sender: "0xFb619E988fD324734be51b0475A67b6921D0301f" as Address,
      nonce: 31996375400717808072039644266496n,
      initCode: "0x91E60e0613810449d098b0b5Ec8b51A0FE8c89855fbfb9cf0000000000000000000000009590ed0c18190a310f4e93caccc4cc17270bed400000000000000000000000000000000000000000000000000000000000000000" as Hex,
      callData: "0x47e1da2a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000003000000000000000000000000ff3311cd15ab091b00421b23bcb60df02efd8db7000000000000000000000000ff3311cd15ab091b00421b23bcb60df02efd8db7000000000000000000000000d129bda7ce0888d7fd66ff46e7577c96984d678f00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000006423b872dd000000000000000000000000f6e64504ed56ec2725cdd0b3c1b23626d66008a2000000000000000000000000fb619e988fd324734be51b0475a67b6921d0301f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000d129bda7ce0888d7fd66ff46e7577c96984d678f00000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084d85d3d270000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003b6261667962656965346636336c7935676a6471346c676d74336e33346f67637a716d757277663275326e756b693366747073613679636a79677865000000000000000000000000000000000000000000000000000000000000000000" as Hex,
      accountGasLimits: "0x000000000000000000000000000f4240000000000000000000000000000f4240" as Hex,
      preVerificationGas: 1000000n,
      gasFees: "0x0000000000000000000000003b9aca00000000000000000000000000b2d05e00" as Hex,
      paymasterAndData: "0xF6e64504ed56ec2725CDd0b3C1b23626D66008A2000000000000000000000000000f4240000000000000000000000000000186a000000136f6d400000127b494018e2048c85Eae2a4443408C284221B33e6190646300000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000aa37dc01fF3311cd15aB091B00421B23BcB60df02EFD8db7Fb619E988fD324734be51b0475A67b6921D0301f00000000000000000000000000000000000000000000000000000000000001f4469cfb36ee62bf829b1a21065b34fad76f69fc458ef15aef644db820e87880e91e9fc86ebe6112b1ad52f5cf050f63cabf35c42328886d54dba63d7912cbb7461b" as Hex,
      signature: "0x47140b77612d9ea6bb0d7175ae8c91ea693e4e231fb48ae499c45d0a9309a42735de448da6ce53a4f195607a9afb7a4a21d5ae78c20cff808702d4e892a082ee1b" as Hex,
    };
    const chain = "base";
    const validUntil = 20379348n;
    const validAfter = 19379348n;
    const gasInfo =  `${mockUserOp.paymasterAndData.slice(2 + 2 * PAYMASTER_VALIDATION_GAS_OFFSET, 2 + 2 * PAYMASTER_DATA_OFFSET)}`

    const verificationGasLimit = BigInt(`0x${gasInfo.slice(0, 32)}`)
    const postVerificationGasLimit = BigInt(`0x${gasInfo.slice(32, 64)}`)
    const hash = computeHash(mockUserOp, chain, validUntil, validAfter, verificationGasLimit, postVerificationGasLimit);
    // Verify the hash format
    expect(hash).toMatch(/^0x[a-fA-F0-9]{64}$/);
    // Verify specific components that went into the hash
    expect(hash).toBe("0x88800f0c29d6ba24fa635822ff4098e15b23048a57eec551b4a3af752aab97cd");
  });

  test("should compute correct hash for user operation 2", async () => {
    const mockUserOp = {
        sender: "0xFb619E988fD324734be51b0475A67b6921D0301f" as Address,
        nonce: 31996793154649218918368382287872n,
        initCode: "0x91e60e0613810449d098b0b5ec8b51a0fe8c89855fbfb9cf0000000000000000000000009590ed0c18190a310f4e93caccc4cc17270bed400000000000000000000000000000000000000000000000000000000000000000" as Hex,
        callData: "0x47e1da2a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000003000000000000000000000000ff3311cd15ab091b00421b23bcb60df02efd8db7000000000000000000000000ff3311cd15ab091b00421b23bcb60df02efd8db7000000000000000000000000d129bda7ce0888d7fd66ff46e7577c96984d678fb872dd000000000000000000000000f6e64504ed56ec2725cdd0b3c1b23626d66008a2000000000000000000000000fb619e988fd324734be51b0475a67b6921d0301f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000d129bda7ce0888d7fd66ff46e7577c96984d678f00000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084d85d3d270000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003b6261667962656965346636336c7935676a6471346c676d74336e33346f67637a716d757277663275326e756b693366747073613679636a79677865000000000000000000000000000000000000000000000000000000000000000000" as Hex,
        accountGasLimits: "0x000000000000000000000000000f4240000000000000000000000000000f4240" as Hex,
        preVerificationGas: 1000000n,
        gasFees: "0x0000000000000000000000003b9aca00000000000000000000000000b2d05e00" as Hex,
        paymasterAndData: "0xf6e64504ed56ec2725cdd0b3c1b23626d66008a2000000000000000000000000000f4240000000000000000000000000000186a000000137231000000127e0d0018e2048c85eae2a4443408c284221b33e6190646300000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000aa37dc01ff3311cd15ab091b00421b23bcb60df02efd8db7fb619e988fd324734be51b0475a67b6921d0301f00000000000000000000000000000000000000000000000000000000000001f494df8f020405e0960c7f8f65eb45ef528830974a9d750bb610a29e45d821833b5ce82e106bdd6a52da2ced548b7f8a8700dd58291936da0f80d884890064de451c" as Hex,
        signature: "f680f9b3a12949978e55911a09d99850096bbe5ab49569fe9d62c8865f3bf54d5a5ff5a112cfa766bb8c380308b37152ab98e40acb5316a7da11b0876a0f82741c" as Hex,
      };
  
      const chain = "base";
      const validUntil = 20390672n;
      const validAfter = 19390672n;
      const gasInfo =  `${mockUserOp.paymasterAndData.slice(2 + 2 * PAYMASTER_VALIDATION_GAS_OFFSET, 2 + 2 * PAYMASTER_DATA_OFFSET)}`

      const verificationGasLimit = BigInt(`0x${gasInfo.slice(0, 32)}`)
      const postVerificationGasLimit = BigInt(`0x${gasInfo.slice(32, 64)}`)
      const hash = computeHash(mockUserOp, chain, validUntil, validAfter, verificationGasLimit, postVerificationGasLimit);
      // Verify the hash format
      expect(hash).toMatch(/^0x[a-fA-F0-9]{64}$/);
      // Verify specific components that went into the hash
      expect(hash).toBe("0x62ccf508e3a63a4902fbde772d218855e6d2a614ec6d9dab8b13b9bf7d477829");
  });
});
